# coding: utf-8

"""
    Machine status API

    Helps to track status of networked machines.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: awball@polarweasel.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Machine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'MachineName',
        'machine_description': 'str',
        'machine_status': 'MachineMachineStatus'
    }

    attribute_map = {
        'name': 'name',
        'machine_description': 'machineDescription',
        'machine_status': 'machineStatus'
    }

    def __init__(self, name=None, machine_description=None, machine_status=None):  # noqa: E501
        """Machine - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._machine_description = None
        self._machine_status = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if machine_description is not None:
            self.machine_description = machine_description
        if machine_status is not None:
            self.machine_status = machine_status

    @property
    def name(self):
        """Gets the name of this Machine.  # noqa: E501


        :return: The name of this Machine.  # noqa: E501
        :rtype: MachineName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Machine.


        :param name: The name of this Machine.  # noqa: E501
        :type: MachineName
        """

        self._name = name

    @property
    def machine_description(self):
        """Gets the machine_description of this Machine.  # noqa: E501

        Optional description of the machine (not useful in a small UI)  # noqa: E501

        :return: The machine_description of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._machine_description

    @machine_description.setter
    def machine_description(self, machine_description):
        """Sets the machine_description of this Machine.

        Optional description of the machine (not useful in a small UI)  # noqa: E501

        :param machine_description: The machine_description of this Machine.  # noqa: E501
        :type: str
        """

        self._machine_description = machine_description

    @property
    def machine_status(self):
        """Gets the machine_status of this Machine.  # noqa: E501


        :return: The machine_status of this Machine.  # noqa: E501
        :rtype: MachineMachineStatus
        """
        return self._machine_status

    @machine_status.setter
    def machine_status(self, machine_status):
        """Sets the machine_status of this Machine.


        :param machine_status: The machine_status of this Machine.  # noqa: E501
        :type: MachineMachineStatus
        """

        self._machine_status = machine_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Machine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Machine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
