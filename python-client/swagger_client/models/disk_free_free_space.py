# coding: utf-8

"""
    Machine status API

    Helps to track status of networked machines.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: awball@polarweasel.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiskFreeFreeSpace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free_space_percentage': 'int',
        'problem_flag': 'bool'
    }

    attribute_map = {
        'free_space_percentage': 'freeSpacePercentage',
        'problem_flag': 'problemFlag'
    }

    def __init__(self, free_space_percentage=None, problem_flag=False):  # noqa: E501
        """DiskFreeFreeSpace - a model defined in Swagger"""  # noqa: E501
        self._free_space_percentage = None
        self._problem_flag = None
        self.discriminator = None
        if free_space_percentage is not None:
            self.free_space_percentage = free_space_percentage
        if problem_flag is not None:
            self.problem_flag = problem_flag

    @property
    def free_space_percentage(self):
        """Gets the free_space_percentage of this DiskFreeFreeSpace.  # noqa: E501

        Available disk space, as an integer percentage  # noqa: E501

        :return: The free_space_percentage of this DiskFreeFreeSpace.  # noqa: E501
        :rtype: int
        """
        return self._free_space_percentage

    @free_space_percentage.setter
    def free_space_percentage(self, free_space_percentage):
        """Sets the free_space_percentage of this DiskFreeFreeSpace.

        Available disk space, as an integer percentage  # noqa: E501

        :param free_space_percentage: The free_space_percentage of this DiskFreeFreeSpace.  # noqa: E501
        :type: int
        """

        self._free_space_percentage = free_space_percentage

    @property
    def problem_flag(self):
        """Gets the problem_flag of this DiskFreeFreeSpace.  # noqa: E501

        True if this should be highlighted, false otherwise  # noqa: E501

        :return: The problem_flag of this DiskFreeFreeSpace.  # noqa: E501
        :rtype: bool
        """
        return self._problem_flag

    @problem_flag.setter
    def problem_flag(self, problem_flag):
        """Sets the problem_flag of this DiskFreeFreeSpace.

        True if this should be highlighted, false otherwise  # noqa: E501

        :param problem_flag: The problem_flag of this DiskFreeFreeSpace.  # noqa: E501
        :type: bool
        """

        self._problem_flag = problem_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiskFreeFreeSpace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskFreeFreeSpace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
